Source: quark-engine
Section: misc
Priority: optional
Maintainer: Kali Developers <devel@kali.org>
Uploaders: JunWei Song <sungboss2004@gmail.com>
Build-Depends: debhelper-compat (= 12),
               dh-python,
               python3-all,
               androguard,
               python3-setuptools,
               python3-requests,
               python3-prettytable,
               python3-tqdm,
               python3-colorama,
               python3-click,
               python3-graphviz,
               python3-pandas

Standards-Version: 21.4.3
Homepage: https://github.com/quark-engine/quark-engine
Vcs-Browser: https://github.com/quark-engine/quark-engine
Vcs-Git: https://github.com/quark-engine/quark-engine
Package: quark-engine
Architecture: all
Depends: ${misc:Depends},
         ${python3:Depends},
         androguard,
         python3-requests,
         python3-prettytable,
         python3-tqdm,
         python3-colorama,
         python3-click,
         python3-graphviz,
         python3-pandas
Description: Android Malware (Analysis | Scoring System)
 Quark-Engine is a full-featured Android analysis framework written in
 Python for hunting threat intelligence inside the APK, DEX files.
 Since it is rule-based, you can use the ones built-in or customize as
 needed.
 With ideas decoded from criminal law, Quark-Engine has its unique
 angles for Android analysis. We developed a Dalvik bytecode loader
 that has tainted analysis inside but also defeats the obfuscation
 techniques used against reverse engineering. And surprisingly,
 the loader matches perfectly the design of our malware scoring
 system.
 Quark-Engine is very easy to use and also provides flexible output
 formats. There are three types of output reports: detail report, call
 graph, and summary report. With these reports in mind, you can get an
 overview of the high-risk behavior inside Android within seconds.
 Also, by integrating with other Android analysis tools such as
 Ghidra, APKLAB, Jadx, Quark-Engine can greatly improve the efficiency
 of reverse engineers.
 .
